import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useLeads } from '@/hooks/useLeads';
import { useProperties } from '@/hooks/useProperties';
import { useContacts } from '@/hooks/useContacts';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { CheckCircle, XCircle, AlertCircle, Loader2 } from 'lucide-react';

type TestResult = 'pending' | 'success' | 'error';

interface TestItem {
  name: string;
  status: TestResult;
  message?: string;
}

export const CRMTest: React.FC = () => {
  const { user, profile } = useAuth();
  const { leads, loading: leadsLoading, createLead, fetchLeads } = useLeads();
  const { properties, loading: propertiesLoading, createProperty, fetchProperties } = useProperties();
  const contacts = useContacts();

  const [tests, setTests] = useState<TestItem[]>([
    { name: 'User Authentication', status: 'pending' },
    { name: 'User Profile Access', status: 'pending' },
    { name: 'Database Connection', status: 'pending' },
    { name: 'Leads Data Access', status: 'pending' },
    { name: 'Properties Data Access', status: 'pending' },
    { name: 'Contacts Data Access', status: 'pending' },
    { name: 'Create Test Lead', status: 'pending' },
    { name: 'Create Test Property', status: 'pending' },
    { name: 'RLS Policies Working', status: 'pending' },
  ]);

  const updateTest = (name: string, status: TestResult, message?: string) => {
    setTests(prev => prev.map(test => 
      test.name === name ? { ...test, status, message } : test
    ));
  };

  const runTests = async () => {
    // Reset all tests
    setTests(prev => prev.map(test => ({ ...test, status: 'pending' })));

    // Test 1: User Authentication
    try {
      if (user) {
        updateTest('User Authentication', 'success', `Authenticated as ${user.email}`);
      } else {
        updateTest('User Authentication', 'error', 'No user found');
      }
    } catch (error) {
      updateTest('User Authentication', 'error', 'Auth check failed');
    }

    // Test 2: User Profile Access
    try {
      if (profile) {
        updateTest('User Profile Access', 'success', `Profile: ${profile.name} (${profile.role})`);
      } else {
        updateTest('User Profile Access', 'error', 'No profile found');
      }
    } catch (error) {
      updateTest('User Profile Access', 'error', 'Profile check failed');
    }

    // Test 3: Database Connection
    try {
      const { data, error } = await supabase.from('profiles').select('count').limit(1);
      if (error) throw error;
      updateTest('Database Connection', 'success', 'Connected to Supabase');
    } catch (error: any) {
      updateTest('Database Connection', 'error', error.message);
    }

    // Test 4: Leads Data Access
    try {
      await fetchLeads();
      updateTest('Leads Data Access', 'success', `${leads.length} leads accessible`);
    } catch (error: any) {
      updateTest('Leads Data Access', 'error', error.message);
    }

    // Test 5: Properties Data Access
    try {
      await fetchProperties();
      updateTest('Properties Data Access', 'success', `${properties.length} properties accessible`);
    } catch (error: any) {
      updateTest('Properties Data Access', 'error', error.message);
    }

    // Test 6: Contacts Data Access
    try {
      const result = await contacts.list({ page: 1, pageSize: 10 });
      if (result.error) throw result.error;
      updateTest('Contacts Data Access', 'success', `${result.data?.length || 0} contacts accessible`);
    } catch (error: any) {
      updateTest('Contacts Data Access', 'error', error.message);
    }

    // Test 7: Create Test Lead
    try {
      const testLead = {
        name: 'Test Lead',
        email: `test.lead.${Date.now()}@example.com`,
        phone: '+1234567890',
        status: 'new' as const,
        priority: 'medium' as const,
        source: 'website' as const,
        contact_status: 'lead' as const,
        agent_id: user?.id || '',
        notes: 'Generated by CRM test suite',
      };
      
      const result = await createLead(testLead);
      if (result.error) throw result.error;
      updateTest('Create Test Lead', 'success', 'Lead created successfully');
    } catch (error: any) {
      updateTest('Create Test Lead', 'error', error.message);
    }

    // Test 8: Create Test Property
    try {
      const testProperty = {
        title: 'Test Property',
        description: 'Generated by CRM test suite',
        property_type: 'apartment',
        address: '123 Test Street',
        city: 'Test City',
        state: 'Test State',
        price: 500000,
        bedrooms: 2,
        bathrooms: 2,
        area_sqft: 1200,
        status: 'available',
        offer_type: 'sale',
        agent_id: user?.id || '',
      };
      
      const result = await createProperty(testProperty);
      if (result.error) throw result.error;
      updateTest('Create Test Property', 'success', 'Property created successfully');
    } catch (error: any) {
      updateTest('Create Test Property', 'error', error.message);
    }

    // Test 9: RLS Policies Working
    try {
      const { data, error } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_id', user?.id)
        .maybeSingle();
      
      if (error) throw error;
      updateTest('RLS Policies Working', 'success', `User role access: ${data?.role || 'none'}`);
    } catch (error: any) {
      updateTest('RLS Policies Working', 'error', error.message);
    }
  };

  useEffect(() => {
    if (user && profile) {
      // Auto-run tests after a delay
      const timer = setTimeout(runTests, 1000);
      return () => clearTimeout(timer);
    }
  }, [user, profile]);

  const getStatusIcon = (status: TestResult) => {
    switch (status) {
      case 'success':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
      case 'pending':
        return <Loader2 className="h-4 w-4 text-yellow-500 animate-spin" />;
    }
  };

  const getStatusBadge = (status: TestResult) => {
    switch (status) {
      case 'success':
        return <Badge variant="default" className="bg-green-500">Pass</Badge>;
      case 'error':
        return <Badge variant="destructive">Fail</Badge>;
      case 'pending':
        return <Badge variant="secondary">Running</Badge>;
    }
  };

  const overallStatus = tests.every(t => t.status === 'success') ? 'success' :
                       tests.some(t => t.status === 'error') ? 'error' : 'pending';

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">CRM System Test</h1>
          <p className="text-muted-foreground">Comprehensive system functionality test</p>
        </div>
        <Button onClick={runTests} variant="outline">
          Run Tests Again
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Total Tests</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{tests.length}</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Passed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-500">
              {tests.filter(t => t.status === 'success').length}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Failed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-500">
              {tests.filter(t => t.status === 'error').length}
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            {overallStatus === 'success' && <CheckCircle className="h-5 w-5 text-green-500" />}
            {overallStatus === 'error' && <AlertCircle className="h-5 w-5 text-red-500" />}
            {overallStatus === 'pending' && <Loader2 className="h-5 w-5 text-yellow-500 animate-spin" />}
            Test Results
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {tests.map((test, index) => (
              <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex items-center gap-3">
                  {getStatusIcon(test.status)}
                  <span className="font-medium">{test.name}</span>
                </div>
                <div className="flex items-center gap-3">
                  {test.message && (
                    <span className="text-sm text-muted-foreground max-w-xs truncate">
                      {test.message}
                    </span>
                  )}
                  {getStatusBadge(test.status)}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>System Status Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span>Authentication:</span>
              <span className={user ? 'text-green-500' : 'text-red-500'}>
                {user ? 'Active' : 'Inactive'}
              </span>
            </div>
            <div className="flex justify-between">
              <span>User Role:</span>
              <span>{profile?.role || 'Unknown'}</span>
            </div>
            <div className="flex justify-between">
              <span>Leads Loading:</span>
              <span className={!leadsLoading ? 'text-green-500' : 'text-yellow-500'}>
                {leadsLoading ? 'Loading...' : 'Ready'}
              </span>
            </div>
            <div className="flex justify-between">
              <span>Properties Loading:</span>
              <span className={!propertiesLoading ? 'text-green-500' : 'text-yellow-500'}>
                {propertiesLoading ? 'Loading...' : 'Ready'}
              </span>
            </div>
            <div className="flex justify-between">
              <span>Contacts:</span>
              <span className="text-green-500">Ready</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};